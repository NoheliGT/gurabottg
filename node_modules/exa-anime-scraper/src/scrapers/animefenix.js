const axios = require('axios')
const cheerio = require('cheerio')

class Animefenix {

	constructor({ base_url } = {}) {
        this.base_url = base_url || "https://www.animefenix.com/"
    }

	async getFromLink(link) {
	if(!link) throw new Error('Falta un parametro, no se especifico un link.')
		if(typeof link === 'string') {
	let htmlContent = await axios({ url: link })
	let $ = cheerio.load(htmlContent.data)

	let generos = []
	let cantidadDeGeneros = $('a', 'p.genres.buttons').length
	var uwu = $('a', 'p.genres.buttons')

	if(cantidadDeGeneros >= 1) {
		for(var i = 0; i < cantidadDeGeneros; i++) {
			generos.push(uwu[i].children[0].data.replace('\n', ''))
		}
	}
		
	var owo = $('ul.has-text-light li')

	let infoGeneral = {
		type: owo[0].children[0].next.data.replace(' ', '') || null,
		status: owo[1].children[0].next.data.replace(' ', '') || null,
		episodes: owo[2].children[0].next.data.replace(' ', '') || null,
		views: owo[3].children[0].next.data.replace(' ', '') || null
	}

	let animeData = {
		name: $('h1.title.has-text-orange').text() || null,
		synopsis: $('p.has-text-light.sinopsis').text() || null,
		thumbnail: $('img', 'figure').attr('src') || null,
		genrers: generos || null,
		generalInfo: infoGeneral
	}

	return animeData;

	} else {
		throw new Error('El parametro asignado no es un string.')
	}

}

	async search(name) {
		if(!name) throw new Error('Falta un parametro, no se especifico el nombre del anime.')
			if(typeof name === 'string') {
		const baseUrl = this.base_url
		const htmlContent = await axios({ url:`${baseUrl +'animes?q='+ name.toLowerCase()}`})
		let $ = cheerio.load(htmlContent.data)

		let link = $('a', '.list-series .serie-card').attr('href')
		let ogi = $('figure[class=image] a', '.list-series')

		let results = []

		for(var i = 0; i < ogi.length; i++) {
			results.push(await this.getFromLink(ogi[i].attribs.href))
		}

		return results
		
	} else {
		throw new Error('El parametro asignado no es un string.')
	}

  }

  async getPopularAnimes(number) {
	if(!number || number > 100) number = 100
	if(isNaN(number)) throw new Error('El numero establecido para el maximo de resultados no es un dato tipo number.')
	const baseUrl = this.base_url
	let htmlContent = await axios({ url: baseUrl })
	let $ = cheerio.load(htmlContent.data)

	let uwu = $('figure[class=image]', '.owl-carousel.home-slider')

	let animes = []
	for(var i = 0; i < uwu.length; i++) {
		let anime = {
			title: uwu[i].children[0].next.attribs.title || null,
			link: uwu[i].children[0].next.attribs.href || null,
			thumbnail: uwu[i].children[1].children[1].attribs.src || null,
			generalInfo: {
			year: uwu[i].children[0].next.next.next.children[0].data || null,
			status: uwu[i].children[0].next.next.next.next.next.children[0].data || null,
			type: uwu[i].children[0].next.next.next.next.next.next.next.children[0].data || null
			},
		}
		animes.push(anime)
		if(i >= number - 1) {
			break;
		}
	}
	return animes
}
  
}

module.exports = Animefenix